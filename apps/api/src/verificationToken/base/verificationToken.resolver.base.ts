/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { VerificationToken } from "./VerificationToken";
import { VerificationTokenCountArgs } from "./VerificationTokenCountArgs";
import { VerificationTokenFindManyArgs } from "./VerificationTokenFindManyArgs";
import { VerificationTokenFindUniqueArgs } from "./VerificationTokenFindUniqueArgs";
import { CreateVerificationTokenArgs } from "./CreateVerificationTokenArgs";
import { UpdateVerificationTokenArgs } from "./UpdateVerificationTokenArgs";
import { DeleteVerificationTokenArgs } from "./DeleteVerificationTokenArgs";
import { VerificationTokenService } from "../verificationToken.service";
@graphql.Resolver(() => VerificationToken)
export class VerificationTokenResolverBase {
  constructor(protected readonly service: VerificationTokenService) {}

  async _verificationTokensMeta(
    @graphql.Args() args: VerificationTokenCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [VerificationToken])
  async verificationTokens(
    @graphql.Args() args: VerificationTokenFindManyArgs
  ): Promise<VerificationToken[]> {
    return this.service.verificationTokens(args);
  }

  @graphql.Query(() => VerificationToken, { nullable: true })
  async verificationToken(
    @graphql.Args() args: VerificationTokenFindUniqueArgs
  ): Promise<VerificationToken | null> {
    const result = await this.service.verificationToken(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => VerificationToken)
  async createVerificationToken(
    @graphql.Args() args: CreateVerificationTokenArgs
  ): Promise<VerificationToken> {
    return await this.service.createVerificationToken({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => VerificationToken)
  async updateVerificationToken(
    @graphql.Args() args: UpdateVerificationTokenArgs
  ): Promise<VerificationToken | null> {
    try {
      return await this.service.updateVerificationToken({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VerificationToken)
  async deleteVerificationToken(
    @graphql.Args() args: DeleteVerificationTokenArgs
  ): Promise<VerificationToken | null> {
    try {
      return await this.service.deleteVerificationToken(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
