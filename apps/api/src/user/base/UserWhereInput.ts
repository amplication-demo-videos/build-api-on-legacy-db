/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AccountListRelationFilter } from "../../account/base/AccountListRelationFilter";
import { ValidateNested, IsOptional, IsEnum } from "class-validator";
import { Type } from "class-transformer";
import { BooleanNullableFilter } from "../../util/BooleanNullableFilter";
import { ApiKeyListRelationFilter } from "../../apiKey/base/ApiKeyListRelationFilter";
import { AvailabilityListRelationFilter } from "../../availability/base/AvailabilityListRelationFilter";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { BooleanFilter } from "../../util/BooleanFilter";
import { BookingListRelationFilter } from "../../booking/base/BookingListRelationFilter";
import { StringFilter } from "../../util/StringFilter";
import { IntFilter } from "../../util/IntFilter";
import { DateTimeFilter } from "../../util/DateTimeFilter";
import { CredentialListRelationFilter } from "../../credential/base/CredentialListRelationFilter";
import { IntNullableFilter } from "../../util/IntNullableFilter";
import { DestinationCalendarWhereUniqueInput } from "../../destinationCalendar/base/DestinationCalendarWhereUniqueInput";
import { DateTimeNullableFilter } from "../../util/DateTimeNullableFilter";
import { EventTypeListRelationFilter } from "../../eventType/base/EventTypeListRelationFilter";
import { FeedbackListRelationFilter } from "../../feedback/base/FeedbackListRelationFilter";
import { EnumUserIdentityProvider } from "./EnumUserIdentityProvider";
import { ImpersonationListRelationFilter } from "../../impersonation/base/ImpersonationListRelationFilter";
import { JsonFilter } from "../../util/JsonFilter";
import { EnumUserPlan } from "./EnumUserPlan";
import { EnumUserRole } from "./EnumUserRole";
import { ScheduleListRelationFilter } from "../../schedule/base/ScheduleListRelationFilter";
import { SelectedCalendarListRelationFilter } from "../../selectedCalendar/base/SelectedCalendarListRelationFilter";
import { SessionListRelationFilter } from "../../session/base/SessionListRelationFilter";
import { MembershipListRelationFilter } from "../../membership/base/MembershipListRelationFilter";
import { WebhookListRelationFilter } from "../../webhook/base/WebhookListRelationFilter";
import { WorkflowListRelationFilter } from "../../workflow/base/WorkflowListRelationFilter";

@InputType()
class UserWhereInput {
  @ApiProperty({
    required: false,
    type: () => AccountListRelationFilter,
  })
  @ValidateNested()
  @Type(() => AccountListRelationFilter)
  @IsOptional()
  @Field(() => AccountListRelationFilter, {
    nullable: true,
  })
  accounts?: AccountListRelationFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  allowDynamicBooking?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: () => ApiKeyListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ApiKeyListRelationFilter)
  @IsOptional()
  @Field(() => ApiKeyListRelationFilter, {
    nullable: true,
  })
  apiKeys?: ApiKeyListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => AvailabilityListRelationFilter,
  })
  @ValidateNested()
  @Type(() => AvailabilityListRelationFilter)
  @IsOptional()
  @Field(() => AvailabilityListRelationFilter, {
    nullable: true,
  })
  availability?: AvailabilityListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  avatar?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: BooleanFilter,
  })
  @Type(() => BooleanFilter)
  @IsOptional()
  @Field(() => BooleanFilter, {
    nullable: true,
  })
  away?: BooleanFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  bio?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => BookingListRelationFilter,
  })
  @ValidateNested()
  @Type(() => BookingListRelationFilter)
  @IsOptional()
  @Field(() => BookingListRelationFilter, {
    nullable: true,
  })
  bookings?: BookingListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  brandColor?: StringFilter;

  @ApiProperty({
    required: false,
    type: IntFilter,
  })
  @Type(() => IntFilter)
  @IsOptional()
  @Field(() => IntFilter, {
    nullable: true,
  })
  bufferTime?: IntFilter;

  @ApiProperty({
    required: false,
    type: BooleanFilter,
  })
  @Type(() => BooleanFilter)
  @IsOptional()
  @Field(() => BooleanFilter, {
    nullable: true,
  })
  completedOnboarding?: BooleanFilter;

  @ApiProperty({
    required: false,
    type: DateTimeFilter,
  })
  @Type(() => DateTimeFilter)
  @IsOptional()
  @Field(() => DateTimeFilter, {
    nullable: true,
  })
  createdDate?: DateTimeFilter;

  @ApiProperty({
    required: false,
    type: () => CredentialListRelationFilter,
  })
  @ValidateNested()
  @Type(() => CredentialListRelationFilter)
  @IsOptional()
  @Field(() => CredentialListRelationFilter, {
    nullable: true,
  })
  credentials?: CredentialListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  darkBrandColor?: StringFilter;

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  defaultScheduleId?: IntNullableFilter;

  @ApiProperty({
    required: false,
    type: () => DestinationCalendarWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => DestinationCalendarWhereUniqueInput)
  @IsOptional()
  @Field(() => DestinationCalendarWhereUniqueInput, {
    nullable: true,
  })
  destinationCalendar?: DestinationCalendarWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: BooleanFilter,
  })
  @Type(() => BooleanFilter)
  @IsOptional()
  @Field(() => BooleanFilter, {
    nullable: true,
  })
  disableImpersonation?: BooleanFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  email?: StringFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  emailVerified?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: IntFilter,
  })
  @Type(() => IntFilter)
  @IsOptional()
  @Field(() => IntFilter, {
    nullable: true,
  })
  endTime?: IntFilter;

  @ApiProperty({
    required: false,
    type: () => EventTypeListRelationFilter,
  })
  @ValidateNested()
  @Type(() => EventTypeListRelationFilter)
  @IsOptional()
  @Field(() => EventTypeListRelationFilter, {
    nullable: true,
  })
  eventTypes?: EventTypeListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => FeedbackListRelationFilter,
  })
  @ValidateNested()
  @Type(() => FeedbackListRelationFilter)
  @IsOptional()
  @Field(() => FeedbackListRelationFilter, {
    nullable: true,
  })
  feedback?: FeedbackListRelationFilter;

  @ApiProperty({
    required: false,
    type: BooleanFilter,
  })
  @Type(() => BooleanFilter)
  @IsOptional()
  @Field(() => BooleanFilter, {
    nullable: true,
  })
  hideBranding?: BooleanFilter;

  @ApiProperty({
    required: false,
    type: IntFilter,
  })
  @Type(() => IntFilter)
  @IsOptional()
  @Field(() => IntFilter, {
    nullable: true,
  })
  id?: IntFilter;

  @ApiProperty({
    required: false,
    enum: EnumUserIdentityProvider,
  })
  @IsEnum(EnumUserIdentityProvider)
  @IsOptional()
  @Field(() => EnumUserIdentityProvider, {
    nullable: true,
  })
  identityProvider?: "CAL" | "GOOGLE" | "SAML";

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  identityProviderId?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => ImpersonationListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ImpersonationListRelationFilter)
  @IsOptional()
  @Field(() => ImpersonationListRelationFilter, {
    nullable: true,
  })
  impersonatedBy?: ImpersonationListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ImpersonationListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ImpersonationListRelationFilter)
  @IsOptional()
  @Field(() => ImpersonationListRelationFilter, {
    nullable: true,
  })
  impersonatedUsers?: ImpersonationListRelationFilter;

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  invitedTo?: IntNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  locale?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: JsonFilter,
  })
  @Type(() => JsonFilter)
  @IsOptional()
  @Field(() => JsonFilter, {
    nullable: true,
  })
  metadata?: JsonFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  name?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  password?: StringNullableFilter;

  @ApiProperty({
    required: false,
    enum: EnumUserPlan,
  })
  @IsEnum(EnumUserPlan)
  @IsOptional()
  @Field(() => EnumUserPlan, {
    nullable: true,
  })
  plan?: "FREE" | "TRIAL" | "PRO";

  @ApiProperty({
    required: false,
    enum: EnumUserRole,
  })
  @IsEnum(EnumUserRole)
  @IsOptional()
  @Field(() => EnumUserRole, {
    nullable: true,
  })
  role?: "USER" | "ADMIN";

  @ApiProperty({
    required: false,
    type: () => ScheduleListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ScheduleListRelationFilter)
  @IsOptional()
  @Field(() => ScheduleListRelationFilter, {
    nullable: true,
  })
  schedules?: ScheduleListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => SelectedCalendarListRelationFilter,
  })
  @ValidateNested()
  @Type(() => SelectedCalendarListRelationFilter)
  @IsOptional()
  @Field(() => SelectedCalendarListRelationFilter, {
    nullable: true,
  })
  selectedCalendars?: SelectedCalendarListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => SessionListRelationFilter,
  })
  @ValidateNested()
  @Type(() => SessionListRelationFilter)
  @IsOptional()
  @Field(() => SessionListRelationFilter, {
    nullable: true,
  })
  sessions?: SessionListRelationFilter;

  @ApiProperty({
    required: false,
    type: IntFilter,
  })
  @Type(() => IntFilter)
  @IsOptional()
  @Field(() => IntFilter, {
    nullable: true,
  })
  startTime?: IntFilter;

  @ApiProperty({
    required: false,
    type: () => MembershipListRelationFilter,
  })
  @ValidateNested()
  @Type(() => MembershipListRelationFilter)
  @IsOptional()
  @Field(() => MembershipListRelationFilter, {
    nullable: true,
  })
  teams?: MembershipListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  theme?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  timeFormat?: IntNullableFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  timeZone?: StringFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  trialEndsAt?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: BooleanFilter,
  })
  @Type(() => BooleanFilter)
  @IsOptional()
  @Field(() => BooleanFilter, {
    nullable: true,
  })
  twoFactorEnabled?: BooleanFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  twoFactorSecret?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  username?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  verified?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: () => WebhookListRelationFilter,
  })
  @ValidateNested()
  @Type(() => WebhookListRelationFilter)
  @IsOptional()
  @Field(() => WebhookListRelationFilter, {
    nullable: true,
  })
  webhooks?: WebhookListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  weekStart?: StringFilter;

  @ApiProperty({
    required: false,
    type: () => WorkflowListRelationFilter,
  })
  @ValidateNested()
  @Type(() => WorkflowListRelationFilter)
  @IsOptional()
  @Field(() => WorkflowListRelationFilter, {
    nullable: true,
  })
  workflows?: WorkflowListRelationFilter;
}

export { UserWhereInput as UserWhereInput };
