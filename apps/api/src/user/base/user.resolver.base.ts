/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { User } from "./User";
import { UserCountArgs } from "./UserCountArgs";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserFindUniqueArgs } from "./UserFindUniqueArgs";
import { CreateUserArgs } from "./CreateUserArgs";
import { UpdateUserArgs } from "./UpdateUserArgs";
import { DeleteUserArgs } from "./DeleteUserArgs";
import { AccountFindManyArgs } from "../../account/base/AccountFindManyArgs";
import { Account } from "../../account/base/Account";
import { ApiKeyFindManyArgs } from "../../apiKey/base/ApiKeyFindManyArgs";
import { ApiKey } from "../../apiKey/base/ApiKey";
import { AvailabilityFindManyArgs } from "../../availability/base/AvailabilityFindManyArgs";
import { Availability } from "../../availability/base/Availability";
import { BookingFindManyArgs } from "../../booking/base/BookingFindManyArgs";
import { Booking } from "../../booking/base/Booking";
import { CredentialFindManyArgs } from "../../credential/base/CredentialFindManyArgs";
import { Credential } from "../../credential/base/Credential";
import { EventTypeFindManyArgs } from "../../eventType/base/EventTypeFindManyArgs";
import { EventType } from "../../eventType/base/EventType";
import { FeedbackFindManyArgs } from "../../feedback/base/FeedbackFindManyArgs";
import { Feedback } from "../../feedback/base/Feedback";
import { ImpersonationFindManyArgs } from "../../impersonation/base/ImpersonationFindManyArgs";
import { Impersonation } from "../../impersonation/base/Impersonation";
import { ScheduleFindManyArgs } from "../../schedule/base/ScheduleFindManyArgs";
import { Schedule } from "../../schedule/base/Schedule";
import { SelectedCalendarFindManyArgs } from "../../selectedCalendar/base/SelectedCalendarFindManyArgs";
import { SelectedCalendar } from "../../selectedCalendar/base/SelectedCalendar";
import { SessionFindManyArgs } from "../../session/base/SessionFindManyArgs";
import { Session } from "../../session/base/Session";
import { MembershipFindManyArgs } from "../../membership/base/MembershipFindManyArgs";
import { Membership } from "../../membership/base/Membership";
import { WebhookFindManyArgs } from "../../webhook/base/WebhookFindManyArgs";
import { Webhook } from "../../webhook/base/Webhook";
import { WorkflowFindManyArgs } from "../../workflow/base/WorkflowFindManyArgs";
import { Workflow } from "../../workflow/base/Workflow";
import { DestinationCalendar } from "../../destinationCalendar/base/DestinationCalendar";
import { UserService } from "../user.service";
@graphql.Resolver(() => User)
export class UserResolverBase {
  constructor(protected readonly service: UserService) {}

  async _usersMeta(
    @graphql.Args() args: UserCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [User])
  async users(@graphql.Args() args: UserFindManyArgs): Promise<User[]> {
    return this.service.users(args);
  }

  @graphql.Query(() => User, { nullable: true })
  async user(@graphql.Args() args: UserFindUniqueArgs): Promise<User | null> {
    const result = await this.service.user(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => User)
  async createUser(@graphql.Args() args: CreateUserArgs): Promise<User> {
    return await this.service.createUser({
      ...args,
      data: {
        ...args.data,

        destinationCalendar: args.data.destinationCalendar
          ? {
              connect: args.data.destinationCalendar,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => User)
  async updateUser(@graphql.Args() args: UpdateUserArgs): Promise<User | null> {
    try {
      return await this.service.updateUser({
        ...args,
        data: {
          ...args.data,

          destinationCalendar: args.data.destinationCalendar
            ? {
                connect: args.data.destinationCalendar,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => User)
  async deleteUser(@graphql.Args() args: DeleteUserArgs): Promise<User | null> {
    try {
      return await this.service.deleteUser(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Account], { name: "accounts" })
  async findAccounts(
    @graphql.Parent() parent: User,
    @graphql.Args() args: AccountFindManyArgs
  ): Promise<Account[]> {
    const results = await this.service.findAccounts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ApiKey], { name: "apiKeys" })
  async findApiKeys(
    @graphql.Parent() parent: User,
    @graphql.Args() args: ApiKeyFindManyArgs
  ): Promise<ApiKey[]> {
    const results = await this.service.findApiKeys(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Availability], { name: "availability" })
  async findAvailability(
    @graphql.Parent() parent: User,
    @graphql.Args() args: AvailabilityFindManyArgs
  ): Promise<Availability[]> {
    const results = await this.service.findAvailability(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Booking], { name: "bookings" })
  async findBookings(
    @graphql.Parent() parent: User,
    @graphql.Args() args: BookingFindManyArgs
  ): Promise<Booking[]> {
    const results = await this.service.findBookings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Credential], { name: "credentials" })
  async findCredentials(
    @graphql.Parent() parent: User,
    @graphql.Args() args: CredentialFindManyArgs
  ): Promise<Credential[]> {
    const results = await this.service.findCredentials(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [EventType], { name: "eventTypes" })
  async findEventTypes(
    @graphql.Parent() parent: User,
    @graphql.Args() args: EventTypeFindManyArgs
  ): Promise<EventType[]> {
    const results = await this.service.findEventTypes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Feedback], { name: "feedback" })
  async findFeedback(
    @graphql.Parent() parent: User,
    @graphql.Args() args: FeedbackFindManyArgs
  ): Promise<Feedback[]> {
    const results = await this.service.findFeedback(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Impersonation], { name: "impersonatedBy" })
  async findImpersonatedBy(
    @graphql.Parent() parent: User,
    @graphql.Args() args: ImpersonationFindManyArgs
  ): Promise<Impersonation[]> {
    const results = await this.service.findImpersonatedBy(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Impersonation], { name: "impersonatedUsers" })
  async findImpersonatedUsers(
    @graphql.Parent() parent: User,
    @graphql.Args() args: ImpersonationFindManyArgs
  ): Promise<Impersonation[]> {
    const results = await this.service.findImpersonatedUsers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Schedule], { name: "schedules" })
  async findSchedules(
    @graphql.Parent() parent: User,
    @graphql.Args() args: ScheduleFindManyArgs
  ): Promise<Schedule[]> {
    const results = await this.service.findSchedules(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [SelectedCalendar], { name: "selectedCalendars" })
  async findSelectedCalendars(
    @graphql.Parent() parent: User,
    @graphql.Args() args: SelectedCalendarFindManyArgs
  ): Promise<SelectedCalendar[]> {
    const results = await this.service.findSelectedCalendars(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Session], { name: "sessions" })
  async findSessions(
    @graphql.Parent() parent: User,
    @graphql.Args() args: SessionFindManyArgs
  ): Promise<Session[]> {
    const results = await this.service.findSessions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Membership], { name: "teams" })
  async findTeams(
    @graphql.Parent() parent: User,
    @graphql.Args() args: MembershipFindManyArgs
  ): Promise<Membership[]> {
    const results = await this.service.findTeams(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Webhook], { name: "webhooks" })
  async findWebhooks(
    @graphql.Parent() parent: User,
    @graphql.Args() args: WebhookFindManyArgs
  ): Promise<Webhook[]> {
    const results = await this.service.findWebhooks(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Workflow], { name: "workflows" })
  async findWorkflows(
    @graphql.Parent() parent: User,
    @graphql.Args() args: WorkflowFindManyArgs
  ): Promise<Workflow[]> {
    const results = await this.service.findWorkflows(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => DestinationCalendar, {
    nullable: true,
    name: "destinationCalendar",
  })
  async getDestinationCalendar(
    @graphql.Parent() parent: User
  ): Promise<DestinationCalendar | null> {
    const result = await this.service.getDestinationCalendar(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
