/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AccountUpdateManyWithoutUsersInput } from "./AccountUpdateManyWithoutUsersInput";
import {
  ValidateNested,
  IsOptional,
  IsBoolean,
  IsString,
  IsInt,
  IsDate,
  IsEnum,
} from "class-validator";
import { Type } from "class-transformer";
import { ApiKeyUpdateManyWithoutUsersInput } from "./ApiKeyUpdateManyWithoutUsersInput";
import { AvailabilityUpdateManyWithoutUsersInput } from "./AvailabilityUpdateManyWithoutUsersInput";
import { BookingUpdateManyWithoutUsersInput } from "./BookingUpdateManyWithoutUsersInput";
import { CredentialUpdateManyWithoutUsersInput } from "./CredentialUpdateManyWithoutUsersInput";
import { DestinationCalendarWhereUniqueInput } from "../../destinationCalendar/base/DestinationCalendarWhereUniqueInput";
import { EventTypeUpdateManyWithoutUsersInput } from "./EventTypeUpdateManyWithoutUsersInput";
import { FeedbackUpdateManyWithoutUsersInput } from "./FeedbackUpdateManyWithoutUsersInput";
import { EnumUserIdentityProvider } from "./EnumUserIdentityProvider";
import { ImpersonationUpdateManyWithoutUsersInput } from "./ImpersonationUpdateManyWithoutUsersInput";
import { IsJSONValue } from "../../validators";
import { GraphQLJSON } from "graphql-type-json";
import { InputJsonValue } from "../../types";
import { EnumUserPlan } from "./EnumUserPlan";
import { EnumUserRole } from "./EnumUserRole";
import { ScheduleUpdateManyWithoutUsersInput } from "./ScheduleUpdateManyWithoutUsersInput";
import { SelectedCalendarUpdateManyWithoutUsersInput } from "./SelectedCalendarUpdateManyWithoutUsersInput";
import { SessionUpdateManyWithoutUsersInput } from "./SessionUpdateManyWithoutUsersInput";
import { MembershipUpdateManyWithoutUsersInput } from "./MembershipUpdateManyWithoutUsersInput";
import { WebhookUpdateManyWithoutUsersInput } from "./WebhookUpdateManyWithoutUsersInput";
import { WorkflowUpdateManyWithoutUsersInput } from "./WorkflowUpdateManyWithoutUsersInput";

@InputType()
class UserUpdateInput {
  @ApiProperty({
    required: false,
    type: () => AccountUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => AccountUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => AccountUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  accounts?: AccountUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  allowDynamicBooking?: boolean | null;

  @ApiProperty({
    required: false,
    type: () => ApiKeyUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => ApiKeyUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => ApiKeyUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  apiKeys?: ApiKeyUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => AvailabilityUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => AvailabilityUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => AvailabilityUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  availability?: AvailabilityUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  avatar?: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  away?: boolean;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  bio?: string | null;

  @ApiProperty({
    required: false,
    type: () => BookingUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => BookingUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => BookingUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  bookings?: BookingUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  brandColor?: string;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  bufferTime?: number;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  completedOnboarding?: boolean;

  @ApiProperty({
    required: false,
    type: () => CredentialUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => CredentialUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => CredentialUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  credentials?: CredentialUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  darkBrandColor?: string;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  defaultScheduleId?: number | null;

  @ApiProperty({
    required: false,
    type: () => DestinationCalendarWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => DestinationCalendarWhereUniqueInput)
  @IsOptional()
  @Field(() => DestinationCalendarWhereUniqueInput, {
    nullable: true,
  })
  destinationCalendar?: DestinationCalendarWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  disableImpersonation?: boolean;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email?: string;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  emailVerified?: Date | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  endTime?: number;

  @ApiProperty({
    required: false,
    type: () => EventTypeUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => EventTypeUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => EventTypeUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  eventTypes?: EventTypeUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => FeedbackUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => FeedbackUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => FeedbackUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  feedback?: FeedbackUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  hideBranding?: boolean;

  @ApiProperty({
    required: false,
    enum: EnumUserIdentityProvider,
  })
  @IsEnum(EnumUserIdentityProvider)
  @IsOptional()
  @Field(() => EnumUserIdentityProvider, {
    nullable: true,
  })
  identityProvider?: "CAL" | "GOOGLE" | "SAML";

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  identityProviderId?: string | null;

  @ApiProperty({
    required: false,
    type: () => ImpersonationUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => ImpersonationUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => ImpersonationUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  impersonatedBy?: ImpersonationUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => ImpersonationUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => ImpersonationUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => ImpersonationUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  impersonatedUsers?: ImpersonationUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  invitedTo?: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  locale?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  metadata?: InputJsonValue;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  password?: string | null;

  @ApiProperty({
    required: false,
    enum: EnumUserPlan,
  })
  @IsEnum(EnumUserPlan)
  @IsOptional()
  @Field(() => EnumUserPlan, {
    nullable: true,
  })
  plan?: "FREE" | "TRIAL" | "PRO";

  @ApiProperty({
    required: false,
    enum: EnumUserRole,
  })
  @IsEnum(EnumUserRole)
  @IsOptional()
  @Field(() => EnumUserRole, {
    nullable: true,
  })
  role?: "USER" | "ADMIN";

  @ApiProperty({
    required: false,
    type: () => ScheduleUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => ScheduleUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => ScheduleUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  schedules?: ScheduleUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => SelectedCalendarUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => SelectedCalendarUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => SelectedCalendarUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  selectedCalendars?: SelectedCalendarUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => SessionUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => SessionUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => SessionUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  sessions?: SessionUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  startTime?: number;

  @ApiProperty({
    required: false,
    type: () => MembershipUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => MembershipUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => MembershipUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  teams?: MembershipUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  theme?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  timeFormat?: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  timeZone?: string;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  trialEndsAt?: Date | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  twoFactorEnabled?: boolean;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  twoFactorSecret?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  username?: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  verified?: boolean | null;

  @ApiProperty({
    required: false,
    type: () => WebhookUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => WebhookUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => WebhookUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  webhooks?: WebhookUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  weekStart?: string;

  @ApiProperty({
    required: false,
    type: () => WorkflowUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => WorkflowUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => WorkflowUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  workflows?: WorkflowUpdateManyWithoutUsersInput;
}

export { UserUpdateInput as UserUpdateInput };
