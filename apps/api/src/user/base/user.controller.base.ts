/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserService } from "../user.service";
import { UserCreateInput } from "./UserCreateInput";
import { User } from "./User";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserWhereUniqueInput } from "./UserWhereUniqueInput";
import { UserUpdateInput } from "./UserUpdateInput";
import { AccountFindManyArgs } from "../../account/base/AccountFindManyArgs";
import { Account } from "../../account/base/Account";
import { AccountWhereUniqueInput } from "../../account/base/AccountWhereUniqueInput";
import { ApiKeyFindManyArgs } from "../../apiKey/base/ApiKeyFindManyArgs";
import { ApiKey } from "../../apiKey/base/ApiKey";
import { ApiKeyWhereUniqueInput } from "../../apiKey/base/ApiKeyWhereUniqueInput";
import { AvailabilityFindManyArgs } from "../../availability/base/AvailabilityFindManyArgs";
import { Availability } from "../../availability/base/Availability";
import { AvailabilityWhereUniqueInput } from "../../availability/base/AvailabilityWhereUniqueInput";
import { BookingFindManyArgs } from "../../booking/base/BookingFindManyArgs";
import { Booking } from "../../booking/base/Booking";
import { BookingWhereUniqueInput } from "../../booking/base/BookingWhereUniqueInput";
import { CredentialFindManyArgs } from "../../credential/base/CredentialFindManyArgs";
import { Credential } from "../../credential/base/Credential";
import { CredentialWhereUniqueInput } from "../../credential/base/CredentialWhereUniqueInput";
import { EventTypeFindManyArgs } from "../../eventType/base/EventTypeFindManyArgs";
import { EventType } from "../../eventType/base/EventType";
import { EventTypeWhereUniqueInput } from "../../eventType/base/EventTypeWhereUniqueInput";
import { FeedbackFindManyArgs } from "../../feedback/base/FeedbackFindManyArgs";
import { Feedback } from "../../feedback/base/Feedback";
import { FeedbackWhereUniqueInput } from "../../feedback/base/FeedbackWhereUniqueInput";
import { ImpersonationFindManyArgs } from "../../impersonation/base/ImpersonationFindManyArgs";
import { Impersonation } from "../../impersonation/base/Impersonation";
import { ImpersonationWhereUniqueInput } from "../../impersonation/base/ImpersonationWhereUniqueInput";
import { ScheduleFindManyArgs } from "../../schedule/base/ScheduleFindManyArgs";
import { Schedule } from "../../schedule/base/Schedule";
import { ScheduleWhereUniqueInput } from "../../schedule/base/ScheduleWhereUniqueInput";
import { SelectedCalendarFindManyArgs } from "../../selectedCalendar/base/SelectedCalendarFindManyArgs";
import { SelectedCalendar } from "../../selectedCalendar/base/SelectedCalendar";
import { SelectedCalendarWhereUniqueInput } from "../../selectedCalendar/base/SelectedCalendarWhereUniqueInput";
import { SessionFindManyArgs } from "../../session/base/SessionFindManyArgs";
import { Session } from "../../session/base/Session";
import { SessionWhereUniqueInput } from "../../session/base/SessionWhereUniqueInput";
import { MembershipFindManyArgs } from "../../membership/base/MembershipFindManyArgs";
import { Membership } from "../../membership/base/Membership";
import { MembershipWhereUniqueInput } from "../../membership/base/MembershipWhereUniqueInput";
import { WebhookFindManyArgs } from "../../webhook/base/WebhookFindManyArgs";
import { Webhook } from "../../webhook/base/Webhook";
import { WebhookWhereUniqueInput } from "../../webhook/base/WebhookWhereUniqueInput";
import { WorkflowFindManyArgs } from "../../workflow/base/WorkflowFindManyArgs";
import { Workflow } from "../../workflow/base/Workflow";
import { WorkflowWhereUniqueInput } from "../../workflow/base/WorkflowWhereUniqueInput";

export class UserControllerBase {
  constructor(protected readonly service: UserService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: User })
  async createUser(@common.Body() data: UserCreateInput): Promise<User> {
    return await this.service.createUser({
      data: {
        ...data,

        destinationCalendar: data.destinationCalendar
          ? {
              connect: data.destinationCalendar,
            }
          : undefined,
      },
      select: {
        allowDynamicBooking: true,
        avatar: true,
        away: true,
        bio: true,
        brandColor: true,
        bufferTime: true,
        completedOnboarding: true,
        createdDate: true,
        darkBrandColor: true,
        defaultScheduleId: true,

        destinationCalendar: {
          select: {
            id: true,
          },
        },

        disableImpersonation: true,
        email: true,
        emailVerified: true,
        endTime: true,
        hideBranding: true,
        id: true,
        identityProvider: true,
        identityProviderId: true,
        invitedTo: true,
        locale: true,
        metadata: true,
        name: true,
        password: true,
        plan: true,
        role: true,
        startTime: true,
        theme: true,
        timeFormat: true,
        timeZone: true,
        trialEndsAt: true,
        twoFactorEnabled: true,
        twoFactorSecret: true,
        username: true,
        verified: true,
        weekStart: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [User] })
  @ApiNestedQuery(UserFindManyArgs)
  async users(@common.Req() request: Request): Promise<User[]> {
    const args = plainToClass(UserFindManyArgs, request.query);
    return this.service.users({
      ...args,
      select: {
        allowDynamicBooking: true,
        avatar: true,
        away: true,
        bio: true,
        brandColor: true,
        bufferTime: true,
        completedOnboarding: true,
        createdDate: true,
        darkBrandColor: true,
        defaultScheduleId: true,

        destinationCalendar: {
          select: {
            id: true,
          },
        },

        disableImpersonation: true,
        email: true,
        emailVerified: true,
        endTime: true,
        hideBranding: true,
        id: true,
        identityProvider: true,
        identityProviderId: true,
        invitedTo: true,
        locale: true,
        metadata: true,
        name: true,
        password: true,
        plan: true,
        role: true,
        startTime: true,
        theme: true,
        timeFormat: true,
        timeZone: true,
        trialEndsAt: true,
        twoFactorEnabled: true,
        twoFactorSecret: true,
        username: true,
        verified: true,
        weekStart: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async user(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    const result = await this.service.user({
      where: params,
      select: {
        allowDynamicBooking: true,
        avatar: true,
        away: true,
        bio: true,
        brandColor: true,
        bufferTime: true,
        completedOnboarding: true,
        createdDate: true,
        darkBrandColor: true,
        defaultScheduleId: true,

        destinationCalendar: {
          select: {
            id: true,
          },
        },

        disableImpersonation: true,
        email: true,
        emailVerified: true,
        endTime: true,
        hideBranding: true,
        id: true,
        identityProvider: true,
        identityProviderId: true,
        invitedTo: true,
        locale: true,
        metadata: true,
        name: true,
        password: true,
        plan: true,
        role: true,
        startTime: true,
        theme: true,
        timeFormat: true,
        timeZone: true,
        trialEndsAt: true,
        twoFactorEnabled: true,
        twoFactorSecret: true,
        username: true,
        verified: true,
        weekStart: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUser(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() data: UserUpdateInput
  ): Promise<User | null> {
    try {
      return await this.service.updateUser({
        where: params,
        data: {
          ...data,

          destinationCalendar: data.destinationCalendar
            ? {
                connect: data.destinationCalendar,
              }
            : undefined,
        },
        select: {
          allowDynamicBooking: true,
          avatar: true,
          away: true,
          bio: true,
          brandColor: true,
          bufferTime: true,
          completedOnboarding: true,
          createdDate: true,
          darkBrandColor: true,
          defaultScheduleId: true,

          destinationCalendar: {
            select: {
              id: true,
            },
          },

          disableImpersonation: true,
          email: true,
          emailVerified: true,
          endTime: true,
          hideBranding: true,
          id: true,
          identityProvider: true,
          identityProviderId: true,
          invitedTo: true,
          locale: true,
          metadata: true,
          name: true,
          password: true,
          plan: true,
          role: true,
          startTime: true,
          theme: true,
          timeFormat: true,
          timeZone: true,
          trialEndsAt: true,
          twoFactorEnabled: true,
          twoFactorSecret: true,
          username: true,
          verified: true,
          weekStart: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUser(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    try {
      return await this.service.deleteUser({
        where: params,
        select: {
          allowDynamicBooking: true,
          avatar: true,
          away: true,
          bio: true,
          brandColor: true,
          bufferTime: true,
          completedOnboarding: true,
          createdDate: true,
          darkBrandColor: true,
          defaultScheduleId: true,

          destinationCalendar: {
            select: {
              id: true,
            },
          },

          disableImpersonation: true,
          email: true,
          emailVerified: true,
          endTime: true,
          hideBranding: true,
          id: true,
          identityProvider: true,
          identityProviderId: true,
          invitedTo: true,
          locale: true,
          metadata: true,
          name: true,
          password: true,
          plan: true,
          role: true,
          startTime: true,
          theme: true,
          timeFormat: true,
          timeZone: true,
          trialEndsAt: true,
          twoFactorEnabled: true,
          twoFactorSecret: true,
          username: true,
          verified: true,
          weekStart: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/accounts")
  @ApiNestedQuery(AccountFindManyArgs)
  async findAccounts(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Account[]> {
    const query = plainToClass(AccountFindManyArgs, request.query);
    const results = await this.service.findAccounts(params.id, {
      ...query,
      select: {
        accessToken: true,
        expiresAt: true,
        id: true,
        idToken: true,
        provider: true,
        providerAccountId: true,
        refreshToken: true,
        scope: true,
        sessionState: true,
        tokenType: true,
        typeField: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/accounts")
  async connectAccounts(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: AccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accounts: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/accounts")
  async updateAccounts(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: AccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accounts: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/accounts")
  async disconnectAccounts(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: AccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accounts: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/apiKeys")
  @ApiNestedQuery(ApiKeyFindManyArgs)
  async findApiKeys(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<ApiKey[]> {
    const query = plainToClass(ApiKeyFindManyArgs, request.query);
    const results = await this.service.findApiKeys(params.id, {
      ...query,
      select: {
        appField: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        expiresAt: true,
        hashedKey: true,
        id: true,
        lastUsedAt: true,
        note: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/apiKeys")
  async connectApiKeys(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ApiKeyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      apiKeys: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/apiKeys")
  async updateApiKeys(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ApiKeyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      apiKeys: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/apiKeys")
  async disconnectApiKeys(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ApiKeyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      apiKeys: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/availability")
  @ApiNestedQuery(AvailabilityFindManyArgs)
  async findAvailability(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Availability[]> {
    const query = plainToClass(AvailabilityFindManyArgs, request.query);
    const results = await this.service.findAvailability(params.id, {
      ...query,
      select: {
        date: true,
        days: true,
        endTime: true,

        eventType: {
          select: {
            id: true,
          },
        },

        id: true,

        schedule: {
          select: {
            id: true,
          },
        },

        startTime: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/availability")
  async connectAvailability(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: AvailabilityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      availability: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/availability")
  async updateAvailability(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: AvailabilityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      availability: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/availability")
  async disconnectAvailability(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: AvailabilityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      availability: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/bookings")
  @ApiNestedQuery(BookingFindManyArgs)
  async findBookings(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Booking[]> {
    const query = plainToClass(BookingFindManyArgs, request.query);
    const results = await this.service.findBookings(params.id, {
      ...query,
      select: {
        cancellationReason: true,
        createdAt: true,
        customInputs: true,

        dailyRef: {
          select: {
            id: true,
          },
        },

        description: true,

        destinationCalendar: {
          select: {
            id: true,
          },
        },

        dynamicEventSlugRef: true,
        dynamicGroupSlugRef: true,
        endTime: true,

        eventType: {
          select: {
            id: true,
          },
        },

        fromReschedule: true,
        id: true,
        location: true,
        paid: true,
        recurringEventId: true,
        rejectionReason: true,
        rescheduled: true,
        smsReminderNumber: true,
        startTime: true,
        status: true,
        title: true,
        uid: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/bookings")
  async connectBookings(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: BookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookings: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/bookings")
  async updateBookings(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: BookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookings: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/bookings")
  async disconnectBookings(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: BookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookings: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/credentials")
  @ApiNestedQuery(CredentialFindManyArgs)
  async findCredentials(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Credential[]> {
    const query = plainToClass(CredentialFindManyArgs, request.query);
    const results = await this.service.findCredentials(params.id, {
      ...query,
      select: {
        appField: {
          select: {
            id: true,
          },
        },

        id: true,
        key: true,
        typeField: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/credentials")
  async connectCredentials(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: CredentialWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      credentials: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/credentials")
  async updateCredentials(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: CredentialWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      credentials: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/credentials")
  async disconnectCredentials(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: CredentialWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      credentials: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/eventTypes")
  @ApiNestedQuery(EventTypeFindManyArgs)
  async findEventTypes(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<EventType[]> {
    const query = plainToClass(EventTypeFindManyArgs, request.query);
    const results = await this.service.findEventTypes(params.id, {
      ...query,
      select: {
        afterEventBuffer: true,
        beforeEventBuffer: true,
        currency: true,
        description: true,

        destinationCalendar: {
          select: {
            id: true,
          },
        },

        disableGuests: true,
        eventName: true,

        hashedLink: {
          select: {
            id: true,
          },
        },

        hidden: true,
        hideCalendarNotes: true,
        id: true,
        length: true,
        locations: true,
        metadata: true,
        minimumBookingNotice: true,
        periodCountCalendarDays: true,
        periodDays: true,
        periodEndDate: true,
        periodStartDate: true,
        periodType: true,
        position: true,
        price: true,
        recurringEvent: true,
        requiresConfirmation: true,

        schedule: {
          select: {
            id: true,
          },
        },

        schedulingType: true,
        seatsPerTimeSlot: true,
        slotInterval: true,
        slug: true,
        successRedirectUrl: true,

        team: {
          select: {
            id: true,
          },
        },

        timeZone: true,
        title: true,
        userId: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/eventTypes")
  async connectEventTypes(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: EventTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      eventTypes: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/eventTypes")
  async updateEventTypes(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: EventTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      eventTypes: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/eventTypes")
  async disconnectEventTypes(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: EventTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      eventTypes: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/feedback")
  @ApiNestedQuery(FeedbackFindManyArgs)
  async findFeedback(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Feedback[]> {
    const query = plainToClass(FeedbackFindManyArgs, request.query);
    const results = await this.service.findFeedback(params.id, {
      ...query,
      select: {
        comment: true,
        date: true,
        id: true,
        rating: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/feedback")
  async connectFeedback(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: FeedbackWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      feedback: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/feedback")
  async updateFeedback(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: FeedbackWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      feedback: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/feedback")
  async disconnectFeedback(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: FeedbackWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      feedback: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/impersonatedBy")
  @ApiNestedQuery(ImpersonationFindManyArgs)
  async findImpersonatedBy(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Impersonation[]> {
    const query = plainToClass(ImpersonationFindManyArgs, request.query);
    const results = await this.service.findImpersonatedBy(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        impersonatedBy: {
          select: {
            id: true,
          },
        },

        impersonatedUser: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/impersonatedBy")
  async connectImpersonatedBy(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ImpersonationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      impersonatedBy: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/impersonatedBy")
  async updateImpersonatedBy(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ImpersonationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      impersonatedBy: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/impersonatedBy")
  async disconnectImpersonatedBy(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ImpersonationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      impersonatedBy: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/impersonatedUsers")
  @ApiNestedQuery(ImpersonationFindManyArgs)
  async findImpersonatedUsers(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Impersonation[]> {
    const query = plainToClass(ImpersonationFindManyArgs, request.query);
    const results = await this.service.findImpersonatedUsers(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        impersonatedBy: {
          select: {
            id: true,
          },
        },

        impersonatedUser: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/impersonatedUsers")
  async connectImpersonatedUsers(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ImpersonationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      impersonatedUsers: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/impersonatedUsers")
  async updateImpersonatedUsers(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ImpersonationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      impersonatedUsers: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/impersonatedUsers")
  async disconnectImpersonatedUsers(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ImpersonationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      impersonatedUsers: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/schedules")
  @ApiNestedQuery(ScheduleFindManyArgs)
  async findSchedules(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Schedule[]> {
    const query = plainToClass(ScheduleFindManyArgs, request.query);
    const results = await this.service.findSchedules(params.id, {
      ...query,
      select: {
        id: true,
        name: true,
        timeZone: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/schedules")
  async connectSchedules(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ScheduleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      schedules: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/schedules")
  async updateSchedules(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ScheduleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      schedules: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/schedules")
  async disconnectSchedules(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ScheduleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      schedules: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/selectedCalendars")
  @ApiNestedQuery(SelectedCalendarFindManyArgs)
  async findSelectedCalendars(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<SelectedCalendar[]> {
    const query = plainToClass(SelectedCalendarFindManyArgs, request.query);
    const results = await this.service.findSelectedCalendars(params.id, {
      ...query,
      select: {
        externalId: true,
        id: true,
        integration: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/selectedCalendars")
  async connectSelectedCalendars(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: SelectedCalendarWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      selectedCalendars: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/selectedCalendars")
  async updateSelectedCalendars(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: SelectedCalendarWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      selectedCalendars: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/selectedCalendars")
  async disconnectSelectedCalendars(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: SelectedCalendarWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      selectedCalendars: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/sessions")
  @ApiNestedQuery(SessionFindManyArgs)
  async findSessions(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Session[]> {
    const query = plainToClass(SessionFindManyArgs, request.query);
    const results = await this.service.findSessions(params.id, {
      ...query,
      select: {
        expires: true,
        id: true,
        sessionToken: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/sessions")
  async connectSessions(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: SessionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sessions: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/sessions")
  async updateSessions(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: SessionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sessions: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/sessions")
  async disconnectSessions(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: SessionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sessions: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/teams")
  @ApiNestedQuery(MembershipFindManyArgs)
  async findTeams(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Membership[]> {
    const query = plainToClass(MembershipFindManyArgs, request.query);
    const results = await this.service.findTeams(params.id, {
      ...query,
      select: {
        accepted: true,
        id: true,
        role: true,

        team: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/teams")
  async connectTeams(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: MembershipWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      teams: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/teams")
  async updateTeams(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: MembershipWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      teams: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/teams")
  async disconnectTeams(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: MembershipWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      teams: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/webhooks")
  @ApiNestedQuery(WebhookFindManyArgs)
  async findWebhooks(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Webhook[]> {
    const query = plainToClass(WebhookFindManyArgs, request.query);
    const results = await this.service.findWebhooks(params.id, {
      ...query,
      select: {
        active: true,

        appField: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        eventTriggers: true,

        eventType: {
          select: {
            id: true,
          },
        },

        id: true,
        payloadTemplate: true,
        secret: true,
        subscriberUrl: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/webhooks")
  async connectWebhooks(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: WebhookWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      webhooks: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/webhooks")
  async updateWebhooks(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: WebhookWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      webhooks: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/webhooks")
  async disconnectWebhooks(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: WebhookWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      webhooks: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/workflows")
  @ApiNestedQuery(WorkflowFindManyArgs)
  async findWorkflows(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Workflow[]> {
    const query = plainToClass(WorkflowFindManyArgs, request.query);
    const results = await this.service.findWorkflows(params.id, {
      ...query,
      select: {
        id: true,
        name: true,
        time: true,
        timeUnit: true,
        trigger: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/workflows")
  async connectWorkflows(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: WorkflowWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      workflows: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/workflows")
  async updateWorkflows(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: WorkflowWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      workflows: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/workflows")
  async disconnectWorkflows(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: WorkflowWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      workflows: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }
}
