/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EventTypeCustomInput } from "./EventTypeCustomInput";
import { EventTypeCustomInputCountArgs } from "./EventTypeCustomInputCountArgs";
import { EventTypeCustomInputFindManyArgs } from "./EventTypeCustomInputFindManyArgs";
import { EventTypeCustomInputFindUniqueArgs } from "./EventTypeCustomInputFindUniqueArgs";
import { CreateEventTypeCustomInputArgs } from "./CreateEventTypeCustomInputArgs";
import { UpdateEventTypeCustomInputArgs } from "./UpdateEventTypeCustomInputArgs";
import { DeleteEventTypeCustomInputArgs } from "./DeleteEventTypeCustomInputArgs";
import { EventType } from "../../eventType/base/EventType";
import { EventTypeCustomInputService } from "../eventTypeCustomInput.service";
@graphql.Resolver(() => EventTypeCustomInput)
export class EventTypeCustomInputResolverBase {
  constructor(protected readonly service: EventTypeCustomInputService) {}

  async _eventTypeCustomInputsMeta(
    @graphql.Args() args: EventTypeCustomInputCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EventTypeCustomInput])
  async eventTypeCustomInputs(
    @graphql.Args() args: EventTypeCustomInputFindManyArgs
  ): Promise<EventTypeCustomInput[]> {
    return this.service.eventTypeCustomInputs(args);
  }

  @graphql.Query(() => EventTypeCustomInput, { nullable: true })
  async eventTypeCustomInput(
    @graphql.Args() args: EventTypeCustomInputFindUniqueArgs
  ): Promise<EventTypeCustomInput | null> {
    const result = await this.service.eventTypeCustomInput(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EventTypeCustomInput)
  async createEventTypeCustomInput(
    @graphql.Args() args: CreateEventTypeCustomInputArgs
  ): Promise<EventTypeCustomInput> {
    return await this.service.createEventTypeCustomInput({
      ...args,
      data: {
        ...args.data,

        eventType: {
          connect: args.data.eventType,
        },
      },
    });
  }

  @graphql.Mutation(() => EventTypeCustomInput)
  async updateEventTypeCustomInput(
    @graphql.Args() args: UpdateEventTypeCustomInputArgs
  ): Promise<EventTypeCustomInput | null> {
    try {
      return await this.service.updateEventTypeCustomInput({
        ...args,
        data: {
          ...args.data,

          eventType: {
            connect: args.data.eventType,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EventTypeCustomInput)
  async deleteEventTypeCustomInput(
    @graphql.Args() args: DeleteEventTypeCustomInputArgs
  ): Promise<EventTypeCustomInput | null> {
    try {
      return await this.service.deleteEventTypeCustomInput(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => EventType, {
    nullable: true,
    name: "eventType",
  })
  async getEventType(
    @graphql.Parent() parent: EventTypeCustomInput
  ): Promise<EventType | null> {
    const result = await this.service.getEventType(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
