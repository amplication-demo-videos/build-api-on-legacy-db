/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Availability } from "./Availability";
import { AvailabilityCountArgs } from "./AvailabilityCountArgs";
import { AvailabilityFindManyArgs } from "./AvailabilityFindManyArgs";
import { AvailabilityFindUniqueArgs } from "./AvailabilityFindUniqueArgs";
import { CreateAvailabilityArgs } from "./CreateAvailabilityArgs";
import { UpdateAvailabilityArgs } from "./UpdateAvailabilityArgs";
import { DeleteAvailabilityArgs } from "./DeleteAvailabilityArgs";
import { EventType } from "../../eventType/base/EventType";
import { Schedule } from "../../schedule/base/Schedule";
import { User } from "../../user/base/User";
import { AvailabilityService } from "../availability.service";
@graphql.Resolver(() => Availability)
export class AvailabilityResolverBase {
  constructor(protected readonly service: AvailabilityService) {}

  async _availabilitiesMeta(
    @graphql.Args() args: AvailabilityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Availability])
  async availabilities(
    @graphql.Args() args: AvailabilityFindManyArgs
  ): Promise<Availability[]> {
    return this.service.availabilities(args);
  }

  @graphql.Query(() => Availability, { nullable: true })
  async availability(
    @graphql.Args() args: AvailabilityFindUniqueArgs
  ): Promise<Availability | null> {
    const result = await this.service.availability(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Availability)
  async createAvailability(
    @graphql.Args() args: CreateAvailabilityArgs
  ): Promise<Availability> {
    return await this.service.createAvailability({
      ...args,
      data: {
        ...args.data,

        eventType: args.data.eventType
          ? {
              connect: args.data.eventType,
            }
          : undefined,

        schedule: args.data.schedule
          ? {
              connect: args.data.schedule,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Availability)
  async updateAvailability(
    @graphql.Args() args: UpdateAvailabilityArgs
  ): Promise<Availability | null> {
    try {
      return await this.service.updateAvailability({
        ...args,
        data: {
          ...args.data,

          eventType: args.data.eventType
            ? {
                connect: args.data.eventType,
              }
            : undefined,

          schedule: args.data.schedule
            ? {
                connect: args.data.schedule,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Availability)
  async deleteAvailability(
    @graphql.Args() args: DeleteAvailabilityArgs
  ): Promise<Availability | null> {
    try {
      return await this.service.deleteAvailability(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => EventType, {
    nullable: true,
    name: "eventType",
  })
  async getEventType(
    @graphql.Parent() parent: Availability
  ): Promise<EventType | null> {
    const result = await this.service.getEventType(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Schedule, {
    nullable: true,
    name: "schedule",
  })
  async getSchedule(
    @graphql.Parent() parent: Availability
  ): Promise<Schedule | null> {
    const result = await this.service.getSchedule(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: Availability): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
