/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ReminderMailService } from "../reminderMail.service";
import { ReminderMailCreateInput } from "./ReminderMailCreateInput";
import { ReminderMail } from "./ReminderMail";
import { ReminderMailFindManyArgs } from "./ReminderMailFindManyArgs";
import { ReminderMailWhereUniqueInput } from "./ReminderMailWhereUniqueInput";
import { ReminderMailUpdateInput } from "./ReminderMailUpdateInput";

export class ReminderMailControllerBase {
  constructor(protected readonly service: ReminderMailService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ReminderMail })
  async createReminderMail(
    @common.Body() data: ReminderMailCreateInput
  ): Promise<ReminderMail> {
    return await this.service.createReminderMail({
      data: data,
      select: {
        createdAt: true,
        elapsedMinutes: true,
        id: true,
        referenceId: true,
        reminderType: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ReminderMail] })
  @ApiNestedQuery(ReminderMailFindManyArgs)
  async reminderMails(@common.Req() request: Request): Promise<ReminderMail[]> {
    const args = plainToClass(ReminderMailFindManyArgs, request.query);
    return this.service.reminderMails({
      ...args,
      select: {
        createdAt: true,
        elapsedMinutes: true,
        id: true,
        referenceId: true,
        reminderType: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ReminderMail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async reminderMail(
    @common.Param() params: ReminderMailWhereUniqueInput
  ): Promise<ReminderMail | null> {
    const result = await this.service.reminderMail({
      where: params,
      select: {
        createdAt: true,
        elapsedMinutes: true,
        id: true,
        referenceId: true,
        reminderType: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ReminderMail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateReminderMail(
    @common.Param() params: ReminderMailWhereUniqueInput,
    @common.Body() data: ReminderMailUpdateInput
  ): Promise<ReminderMail | null> {
    try {
      return await this.service.updateReminderMail({
        where: params,
        data: data,
        select: {
          createdAt: true,
          elapsedMinutes: true,
          id: true,
          referenceId: true,
          reminderType: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ReminderMail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteReminderMail(
    @common.Param() params: ReminderMailWhereUniqueInput
  ): Promise<ReminderMail | null> {
    try {
      return await this.service.deleteReminderMail({
        where: params,
        select: {
          createdAt: true,
          elapsedMinutes: true,
          id: true,
          referenceId: true,
          reminderType: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
