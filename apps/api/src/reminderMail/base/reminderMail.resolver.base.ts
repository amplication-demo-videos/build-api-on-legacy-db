/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ReminderMail } from "./ReminderMail";
import { ReminderMailCountArgs } from "./ReminderMailCountArgs";
import { ReminderMailFindManyArgs } from "./ReminderMailFindManyArgs";
import { ReminderMailFindUniqueArgs } from "./ReminderMailFindUniqueArgs";
import { CreateReminderMailArgs } from "./CreateReminderMailArgs";
import { UpdateReminderMailArgs } from "./UpdateReminderMailArgs";
import { DeleteReminderMailArgs } from "./DeleteReminderMailArgs";
import { ReminderMailService } from "../reminderMail.service";
@graphql.Resolver(() => ReminderMail)
export class ReminderMailResolverBase {
  constructor(protected readonly service: ReminderMailService) {}

  async _reminderMailsMeta(
    @graphql.Args() args: ReminderMailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ReminderMail])
  async reminderMails(
    @graphql.Args() args: ReminderMailFindManyArgs
  ): Promise<ReminderMail[]> {
    return this.service.reminderMails(args);
  }

  @graphql.Query(() => ReminderMail, { nullable: true })
  async reminderMail(
    @graphql.Args() args: ReminderMailFindUniqueArgs
  ): Promise<ReminderMail | null> {
    const result = await this.service.reminderMail(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ReminderMail)
  async createReminderMail(
    @graphql.Args() args: CreateReminderMailArgs
  ): Promise<ReminderMail> {
    return await this.service.createReminderMail({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ReminderMail)
  async updateReminderMail(
    @graphql.Args() args: UpdateReminderMailArgs
  ): Promise<ReminderMail | null> {
    try {
      return await this.service.updateReminderMail({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ReminderMail)
  async deleteReminderMail(
    @graphql.Args() args: DeleteReminderMailArgs
  ): Promise<ReminderMail | null> {
    try {
      return await this.service.deleteReminderMail(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
