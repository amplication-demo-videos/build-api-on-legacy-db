/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Workflow } from "./Workflow";
import { WorkflowCountArgs } from "./WorkflowCountArgs";
import { WorkflowFindManyArgs } from "./WorkflowFindManyArgs";
import { WorkflowFindUniqueArgs } from "./WorkflowFindUniqueArgs";
import { CreateWorkflowArgs } from "./CreateWorkflowArgs";
import { UpdateWorkflowArgs } from "./UpdateWorkflowArgs";
import { DeleteWorkflowArgs } from "./DeleteWorkflowArgs";
import { WorkflowsOnEventTypeFindManyArgs } from "../../workflowsOnEventType/base/WorkflowsOnEventTypeFindManyArgs";
import { WorkflowsOnEventType } from "../../workflowsOnEventType/base/WorkflowsOnEventType";
import { WorkflowStepFindManyArgs } from "../../workflowStep/base/WorkflowStepFindManyArgs";
import { WorkflowStep } from "../../workflowStep/base/WorkflowStep";
import { User } from "../../user/base/User";
import { WorkflowService } from "../workflow.service";
@graphql.Resolver(() => Workflow)
export class WorkflowResolverBase {
  constructor(protected readonly service: WorkflowService) {}

  async _workflowsMeta(
    @graphql.Args() args: WorkflowCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Workflow])
  async workflows(
    @graphql.Args() args: WorkflowFindManyArgs
  ): Promise<Workflow[]> {
    return this.service.workflows(args);
  }

  @graphql.Query(() => Workflow, { nullable: true })
  async workflow(
    @graphql.Args() args: WorkflowFindUniqueArgs
  ): Promise<Workflow | null> {
    const result = await this.service.workflow(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Workflow)
  async createWorkflow(
    @graphql.Args() args: CreateWorkflowArgs
  ): Promise<Workflow> {
    return await this.service.createWorkflow({
      ...args,
      data: {
        ...args.data,

        user: {
          connect: args.data.user,
        },
      },
    });
  }

  @graphql.Mutation(() => Workflow)
  async updateWorkflow(
    @graphql.Args() args: UpdateWorkflowArgs
  ): Promise<Workflow | null> {
    try {
      return await this.service.updateWorkflow({
        ...args,
        data: {
          ...args.data,

          user: {
            connect: args.data.user,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Workflow)
  async deleteWorkflow(
    @graphql.Args() args: DeleteWorkflowArgs
  ): Promise<Workflow | null> {
    try {
      return await this.service.deleteWorkflow(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [WorkflowsOnEventType], { name: "activeOn" })
  async findActiveOn(
    @graphql.Parent() parent: Workflow,
    @graphql.Args() args: WorkflowsOnEventTypeFindManyArgs
  ): Promise<WorkflowsOnEventType[]> {
    const results = await this.service.findActiveOn(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [WorkflowStep], { name: "steps" })
  async findSteps(
    @graphql.Parent() parent: Workflow,
    @graphql.Args() args: WorkflowStepFindManyArgs
  ): Promise<WorkflowStep[]> {
    const results = await this.service.findSteps(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: Workflow): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
