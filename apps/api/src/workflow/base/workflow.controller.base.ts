/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WorkflowService } from "../workflow.service";
import { WorkflowCreateInput } from "./WorkflowCreateInput";
import { Workflow } from "./Workflow";
import { WorkflowFindManyArgs } from "./WorkflowFindManyArgs";
import { WorkflowWhereUniqueInput } from "./WorkflowWhereUniqueInput";
import { WorkflowUpdateInput } from "./WorkflowUpdateInput";
import { WorkflowsOnEventTypeFindManyArgs } from "../../workflowsOnEventType/base/WorkflowsOnEventTypeFindManyArgs";
import { WorkflowsOnEventType } from "../../workflowsOnEventType/base/WorkflowsOnEventType";
import { WorkflowsOnEventTypeWhereUniqueInput } from "../../workflowsOnEventType/base/WorkflowsOnEventTypeWhereUniqueInput";
import { WorkflowStepFindManyArgs } from "../../workflowStep/base/WorkflowStepFindManyArgs";
import { WorkflowStep } from "../../workflowStep/base/WorkflowStep";
import { WorkflowStepWhereUniqueInput } from "../../workflowStep/base/WorkflowStepWhereUniqueInput";

export class WorkflowControllerBase {
  constructor(protected readonly service: WorkflowService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Workflow })
  async createWorkflow(
    @common.Body() data: WorkflowCreateInput
  ): Promise<Workflow> {
    return await this.service.createWorkflow({
      data: {
        ...data,

        user: {
          connect: data.user,
        },
      },
      select: {
        id: true,
        name: true,
        time: true,
        timeUnit: true,
        trigger: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Workflow] })
  @ApiNestedQuery(WorkflowFindManyArgs)
  async workflows(@common.Req() request: Request): Promise<Workflow[]> {
    const args = plainToClass(WorkflowFindManyArgs, request.query);
    return this.service.workflows({
      ...args,
      select: {
        id: true,
        name: true,
        time: true,
        timeUnit: true,
        trigger: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Workflow })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async workflow(
    @common.Param() params: WorkflowWhereUniqueInput
  ): Promise<Workflow | null> {
    const result = await this.service.workflow({
      where: params,
      select: {
        id: true,
        name: true,
        time: true,
        timeUnit: true,
        trigger: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Workflow })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWorkflow(
    @common.Param() params: WorkflowWhereUniqueInput,
    @common.Body() data: WorkflowUpdateInput
  ): Promise<Workflow | null> {
    try {
      return await this.service.updateWorkflow({
        where: params,
        data: {
          ...data,

          user: {
            connect: data.user,
          },
        },
        select: {
          id: true,
          name: true,
          time: true,
          timeUnit: true,
          trigger: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Workflow })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWorkflow(
    @common.Param() params: WorkflowWhereUniqueInput
  ): Promise<Workflow | null> {
    try {
      return await this.service.deleteWorkflow({
        where: params,
        select: {
          id: true,
          name: true,
          time: true,
          timeUnit: true,
          trigger: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/activeOn")
  @ApiNestedQuery(WorkflowsOnEventTypeFindManyArgs)
  async findActiveOn(
    @common.Req() request: Request,
    @common.Param() params: WorkflowWhereUniqueInput
  ): Promise<WorkflowsOnEventType[]> {
    const query = plainToClass(WorkflowsOnEventTypeFindManyArgs, request.query);
    const results = await this.service.findActiveOn(params.id, {
      ...query,
      select: {
        eventType: {
          select: {
            id: true,
          },
        },

        id: true,

        workflow: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/activeOn")
  async connectActiveOn(
    @common.Param() params: WorkflowWhereUniqueInput,
    @common.Body() body: WorkflowsOnEventTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      activeOn: {
        connect: body,
      },
    };
    await this.service.updateWorkflow({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/activeOn")
  async updateActiveOn(
    @common.Param() params: WorkflowWhereUniqueInput,
    @common.Body() body: WorkflowsOnEventTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      activeOn: {
        set: body,
      },
    };
    await this.service.updateWorkflow({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/activeOn")
  async disconnectActiveOn(
    @common.Param() params: WorkflowWhereUniqueInput,
    @common.Body() body: WorkflowsOnEventTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      activeOn: {
        disconnect: body,
      },
    };
    await this.service.updateWorkflow({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/steps")
  @ApiNestedQuery(WorkflowStepFindManyArgs)
  async findSteps(
    @common.Req() request: Request,
    @common.Param() params: WorkflowWhereUniqueInput
  ): Promise<WorkflowStep[]> {
    const query = plainToClass(WorkflowStepFindManyArgs, request.query);
    const results = await this.service.findSteps(params.id, {
      ...query,
      select: {
        action: true,
        emailSubject: true,
        id: true,
        reminderBody: true,
        sendTo: true,
        stepNumber: true,
        template: true,

        workflow: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/steps")
  async connectSteps(
    @common.Param() params: WorkflowWhereUniqueInput,
    @common.Body() body: WorkflowStepWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      steps: {
        connect: body,
      },
    };
    await this.service.updateWorkflow({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/steps")
  async updateSteps(
    @common.Param() params: WorkflowWhereUniqueInput,
    @common.Body() body: WorkflowStepWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      steps: {
        set: body,
      },
    };
    await this.service.updateWorkflow({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/steps")
  async disconnectSteps(
    @common.Param() params: WorkflowWhereUniqueInput,
    @common.Body() body: WorkflowStepWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      steps: {
        disconnect: body,
      },
    };
    await this.service.updateWorkflow({
      where: params,
      data,
      select: { id: true },
    });
  }
}
