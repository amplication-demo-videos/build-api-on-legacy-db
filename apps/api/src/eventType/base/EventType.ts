/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsInt,
  ValidateNested,
  IsOptional,
  IsString,
  IsBoolean,
  IsDate,
  IsEnum,
} from "class-validator";
import { Availability } from "../../availability/base/Availability";
import { Type } from "class-transformer";
import { Booking } from "../../booking/base/Booking";
import { EventTypeCustomInput } from "../../eventTypeCustomInput/base/EventTypeCustomInput";
import { DestinationCalendar } from "../../destinationCalendar/base/DestinationCalendar";
import { HashedLink } from "../../hashedLink/base/HashedLink";
import { IsJSONValue } from "../../validators";
import { GraphQLJSON } from "graphql-type-json";
import { JsonValue } from "type-fest";
import { EnumEventTypePeriodType } from "./EnumEventTypePeriodType";
import { Schedule } from "../../schedule/base/Schedule";
import { EnumEventTypeSchedulingType } from "./EnumEventTypeSchedulingType";
import { Team } from "../../team/base/Team";
import { User } from "../../user/base/User";
import { Webhook } from "../../webhook/base/Webhook";
import { WorkflowsOnEventType } from "../../workflowsOnEventType/base/WorkflowsOnEventType";

@ObjectType()
class EventType {
  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  afterEventBuffer!: number;

  @ApiProperty({
    required: false,
    type: () => [Availability],
  })
  @ValidateNested()
  @Type(() => Availability)
  @IsOptional()
  availability?: Array<Availability>;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  beforeEventBuffer!: number;

  @ApiProperty({
    required: false,
    type: () => [Booking],
  })
  @ValidateNested()
  @Type(() => Booking)
  @IsOptional()
  bookings?: Array<Booking>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  currency!: string;

  @ApiProperty({
    required: false,
    type: () => [EventTypeCustomInput],
  })
  @ValidateNested()
  @Type(() => EventTypeCustomInput)
  @IsOptional()
  customInputs?: Array<EventTypeCustomInput>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  description!: string | null;

  @ApiProperty({
    required: false,
    type: () => DestinationCalendar,
  })
  @ValidateNested()
  @Type(() => DestinationCalendar)
  @IsOptional()
  destinationCalendar?: DestinationCalendar | null;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  disableGuests!: boolean;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  eventName!: string | null;

  @ApiProperty({
    required: false,
    type: () => HashedLink,
  })
  @ValidateNested()
  @Type(() => HashedLink)
  @IsOptional()
  hashedLink?: HashedLink | null;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  hidden!: boolean;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  hideCalendarNotes!: boolean;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  id!: number;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  length!: number;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  locations!: JsonValue;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  metadata!: JsonValue;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  minimumBookingNotice!: number;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  periodCountCalendarDays!: boolean | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  periodDays!: number | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  periodEndDate!: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  periodStartDate!: Date | null;

  @ApiProperty({
    required: true,
    enum: EnumEventTypePeriodType,
  })
  @IsEnum(EnumEventTypePeriodType)
  @Field(() => EnumEventTypePeriodType, {
    nullable: true,
  })
  periodType?: "UNLIMITED" | "ROLLING" | "RANGE";

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  position!: number;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  price!: number;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  recurringEvent!: JsonValue;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  requiresConfirmation!: boolean;

  @ApiProperty({
    required: false,
    type: () => Schedule,
  })
  @ValidateNested()
  @Type(() => Schedule)
  @IsOptional()
  schedule?: Schedule | null;

  @ApiProperty({
    required: false,
    enum: EnumEventTypeSchedulingType,
  })
  @IsEnum(EnumEventTypeSchedulingType)
  @IsOptional()
  @Field(() => EnumEventTypeSchedulingType, {
    nullable: true,
  })
  schedulingType?: "ROUND_ROBIN" | "COLLECTIVE" | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  seatsPerTimeSlot!: number | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  slotInterval!: number | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  slug!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  successRedirectUrl!: string | null;

  @ApiProperty({
    required: false,
    type: () => Team,
  })
  @ValidateNested()
  @Type(() => Team)
  @IsOptional()
  team?: Team | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  timeZone!: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  title!: string;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  userId!: number | null;

  @ApiProperty({
    required: true,
    type: () => [User],
  })
  @ValidateNested()
  @Type(() => User)
  @IsOptional()
  users?: Array<User>;

  @ApiProperty({
    required: false,
    type: () => [Webhook],
  })
  @ValidateNested()
  @Type(() => Webhook)
  @IsOptional()
  webhooks?: Array<Webhook>;

  @ApiProperty({
    required: false,
    type: () => [WorkflowsOnEventType],
  })
  @ValidateNested()
  @Type(() => WorkflowsOnEventType)
  @IsOptional()
  workflows?: Array<WorkflowsOnEventType>;
}

export { EventType as EventType };
