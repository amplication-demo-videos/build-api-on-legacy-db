/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  EventType, // @ts-ignore
  Availability, // @ts-ignore
  Booking, // @ts-ignore
  EventTypeCustomInput, // @ts-ignore
  User, // @ts-ignore
  Webhook, // @ts-ignore
  WorkflowsOnEventType, // @ts-ignore
  DestinationCalendar, // @ts-ignore
  HashedLink, // @ts-ignore
  Schedule, // @ts-ignore
  Team,
} from "@prisma/client";

export class EventTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.EventTypeCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.EventTypeCountArgs>
  ): Promise<number> {
    return this.prisma.eventType.count(args);
  }

  async eventTypes<T extends Prisma.EventTypeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.EventTypeFindManyArgs>
  ): Promise<EventType[]> {
    return this.prisma.eventType.findMany(args);
  }
  async eventType<T extends Prisma.EventTypeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.EventTypeFindUniqueArgs>
  ): Promise<EventType | null> {
    return this.prisma.eventType.findUnique(args);
  }
  async createEventType<T extends Prisma.EventTypeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EventTypeCreateArgs>
  ): Promise<EventType> {
    return this.prisma.eventType.create<T>(args);
  }
  async updateEventType<T extends Prisma.EventTypeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EventTypeUpdateArgs>
  ): Promise<EventType> {
    return this.prisma.eventType.update<T>(args);
  }
  async deleteEventType<T extends Prisma.EventTypeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.EventTypeDeleteArgs>
  ): Promise<EventType> {
    return this.prisma.eventType.delete(args);
  }

  async findAvailability(
    parentId: number,
    args: Prisma.AvailabilityFindManyArgs
  ): Promise<Availability[]> {
    return this.prisma.eventType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .availability(args);
  }

  async findBookings(
    parentId: number,
    args: Prisma.BookingFindManyArgs
  ): Promise<Booking[]> {
    return this.prisma.eventType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bookings(args);
  }

  async findCustomInputs(
    parentId: number,
    args: Prisma.EventTypeCustomInputFindManyArgs
  ): Promise<EventTypeCustomInput[]> {
    return this.prisma.eventType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .customInputs(args);
  }

  async findUsers(
    parentId: number,
    args: Prisma.UserFindManyArgs
  ): Promise<User[]> {
    return this.prisma.eventType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .users(args);
  }

  async findWebhooks(
    parentId: number,
    args: Prisma.WebhookFindManyArgs
  ): Promise<Webhook[]> {
    return this.prisma.eventType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .webhooks(args);
  }

  async findWorkflows(
    parentId: number,
    args: Prisma.WorkflowsOnEventTypeFindManyArgs
  ): Promise<WorkflowsOnEventType[]> {
    return this.prisma.eventType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .workflows(args);
  }

  async getDestinationCalendar(
    parentId: number
  ): Promise<DestinationCalendar | null> {
    return this.prisma.eventType
      .findUnique({
        where: { id: parentId },
      })
      .destinationCalendar();
  }

  async getHashedLink(parentId: number): Promise<HashedLink | null> {
    return this.prisma.eventType
      .findUnique({
        where: { id: parentId },
      })
      .hashedLink();
  }

  async getSchedule(parentId: number): Promise<Schedule | null> {
    return this.prisma.eventType
      .findUnique({
        where: { id: parentId },
      })
      .schedule();
  }

  async getTeam(parentId: number): Promise<Team | null> {
    return this.prisma.eventType
      .findUnique({
        where: { id: parentId },
      })
      .team();
  }
}
