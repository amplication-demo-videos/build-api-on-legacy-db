/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BookingReference } from "./BookingReference";
import { BookingReferenceCountArgs } from "./BookingReferenceCountArgs";
import { BookingReferenceFindManyArgs } from "./BookingReferenceFindManyArgs";
import { BookingReferenceFindUniqueArgs } from "./BookingReferenceFindUniqueArgs";
import { CreateBookingReferenceArgs } from "./CreateBookingReferenceArgs";
import { UpdateBookingReferenceArgs } from "./UpdateBookingReferenceArgs";
import { DeleteBookingReferenceArgs } from "./DeleteBookingReferenceArgs";
import { Booking } from "../../booking/base/Booking";
import { BookingReferenceService } from "../bookingReference.service";
@graphql.Resolver(() => BookingReference)
export class BookingReferenceResolverBase {
  constructor(protected readonly service: BookingReferenceService) {}

  async _bookingReferencesMeta(
    @graphql.Args() args: BookingReferenceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BookingReference])
  async bookingReferences(
    @graphql.Args() args: BookingReferenceFindManyArgs
  ): Promise<BookingReference[]> {
    return this.service.bookingReferences(args);
  }

  @graphql.Query(() => BookingReference, { nullable: true })
  async bookingReference(
    @graphql.Args() args: BookingReferenceFindUniqueArgs
  ): Promise<BookingReference | null> {
    const result = await this.service.bookingReference(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BookingReference)
  async createBookingReference(
    @graphql.Args() args: CreateBookingReferenceArgs
  ): Promise<BookingReference> {
    return await this.service.createBookingReference({
      ...args,
      data: {
        ...args.data,

        booking: args.data.booking
          ? {
              connect: args.data.booking,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => BookingReference)
  async updateBookingReference(
    @graphql.Args() args: UpdateBookingReferenceArgs
  ): Promise<BookingReference | null> {
    try {
      return await this.service.updateBookingReference({
        ...args,
        data: {
          ...args.data,

          booking: args.data.booking
            ? {
                connect: args.data.booking,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BookingReference)
  async deleteBookingReference(
    @graphql.Args() args: DeleteBookingReferenceArgs
  ): Promise<BookingReference | null> {
    try {
      return await this.service.deleteBookingReference(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Booking, {
    nullable: true,
    name: "booking",
  })
  async getBooking(
    @graphql.Parent() parent: BookingReference
  ): Promise<Booking | null> {
    const result = await this.service.getBooking(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
