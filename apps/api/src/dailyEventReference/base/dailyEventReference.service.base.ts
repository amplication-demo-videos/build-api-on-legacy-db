/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DailyEventReference, // @ts-ignore
  Booking,
} from "@prisma/client";

export class DailyEventReferenceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.DailyEventReferenceCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.DailyEventReferenceCountArgs>
  ): Promise<number> {
    return this.prisma.dailyEventReference.count(args);
  }

  async dailyEventReferences<T extends Prisma.DailyEventReferenceFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DailyEventReferenceFindManyArgs>
  ): Promise<DailyEventReference[]> {
    return this.prisma.dailyEventReference.findMany(args);
  }
  async dailyEventReference<T extends Prisma.DailyEventReferenceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DailyEventReferenceFindUniqueArgs>
  ): Promise<DailyEventReference | null> {
    return this.prisma.dailyEventReference.findUnique(args);
  }
  async createDailyEventReference<
    T extends Prisma.DailyEventReferenceCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.DailyEventReferenceCreateArgs>
  ): Promise<DailyEventReference> {
    return this.prisma.dailyEventReference.create<T>(args);
  }
  async updateDailyEventReference<
    T extends Prisma.DailyEventReferenceUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.DailyEventReferenceUpdateArgs>
  ): Promise<DailyEventReference> {
    return this.prisma.dailyEventReference.update<T>(args);
  }
  async deleteDailyEventReference<
    T extends Prisma.DailyEventReferenceDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.DailyEventReferenceDeleteArgs>
  ): Promise<DailyEventReference> {
    return this.prisma.dailyEventReference.delete(args);
  }

  async getBooking(parentId: number): Promise<Booking | null> {
    return this.prisma.dailyEventReference
      .findUnique({
        where: { id: parentId },
      })
      .booking();
  }
}
