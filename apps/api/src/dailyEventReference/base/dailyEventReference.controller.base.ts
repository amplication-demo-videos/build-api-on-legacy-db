/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DailyEventReferenceService } from "../dailyEventReference.service";
import { DailyEventReferenceCreateInput } from "./DailyEventReferenceCreateInput";
import { DailyEventReference } from "./DailyEventReference";
import { DailyEventReferenceFindManyArgs } from "./DailyEventReferenceFindManyArgs";
import { DailyEventReferenceWhereUniqueInput } from "./DailyEventReferenceWhereUniqueInput";
import { DailyEventReferenceUpdateInput } from "./DailyEventReferenceUpdateInput";

export class DailyEventReferenceControllerBase {
  constructor(protected readonly service: DailyEventReferenceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DailyEventReference })
  async createDailyEventReference(
    @common.Body() data: DailyEventReferenceCreateInput
  ): Promise<DailyEventReference> {
    return await this.service.createDailyEventReference({
      data: {
        ...data,

        booking: data.booking
          ? {
              connect: data.booking,
            }
          : undefined,
      },
      select: {
        booking: {
          select: {
            id: true,
          },
        },

        dailytoken: true,
        dailyurl: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DailyEventReference] })
  @ApiNestedQuery(DailyEventReferenceFindManyArgs)
  async dailyEventReferences(
    @common.Req() request: Request
  ): Promise<DailyEventReference[]> {
    const args = plainToClass(DailyEventReferenceFindManyArgs, request.query);
    return this.service.dailyEventReferences({
      ...args,
      select: {
        booking: {
          select: {
            id: true,
          },
        },

        dailytoken: true,
        dailyurl: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DailyEventReference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dailyEventReference(
    @common.Param() params: DailyEventReferenceWhereUniqueInput
  ): Promise<DailyEventReference | null> {
    const result = await this.service.dailyEventReference({
      where: params,
      select: {
        booking: {
          select: {
            id: true,
          },
        },

        dailytoken: true,
        dailyurl: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DailyEventReference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDailyEventReference(
    @common.Param() params: DailyEventReferenceWhereUniqueInput,
    @common.Body() data: DailyEventReferenceUpdateInput
  ): Promise<DailyEventReference | null> {
    try {
      return await this.service.updateDailyEventReference({
        where: params,
        data: {
          ...data,

          booking: data.booking
            ? {
                connect: data.booking,
              }
            : undefined,
        },
        select: {
          booking: {
            select: {
              id: true,
            },
          },

          dailytoken: true,
          dailyurl: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DailyEventReference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDailyEventReference(
    @common.Param() params: DailyEventReferenceWhereUniqueInput
  ): Promise<DailyEventReference | null> {
    try {
      return await this.service.deleteDailyEventReference({
        where: params,
        select: {
          booking: {
            select: {
              id: true,
            },
          },

          dailytoken: true,
          dailyurl: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
