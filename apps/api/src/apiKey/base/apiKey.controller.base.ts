/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ApiKeyService } from "../apiKey.service";
import { ApiKeyCreateInput } from "./ApiKeyCreateInput";
import { ApiKey } from "./ApiKey";
import { ApiKeyFindManyArgs } from "./ApiKeyFindManyArgs";
import { ApiKeyWhereUniqueInput } from "./ApiKeyWhereUniqueInput";
import { ApiKeyUpdateInput } from "./ApiKeyUpdateInput";

export class ApiKeyControllerBase {
  constructor(protected readonly service: ApiKeyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ApiKey })
  async createApiKey(@common.Body() data: ApiKeyCreateInput): Promise<ApiKey> {
    return await this.service.createApiKey({
      data: {
        ...data,

        appField: data.appField
          ? {
              connect: data.appField,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        appField: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        expiresAt: true,
        hashedKey: true,
        id: true,
        lastUsedAt: true,
        note: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ApiKey] })
  @ApiNestedQuery(ApiKeyFindManyArgs)
  async apiKeys(@common.Req() request: Request): Promise<ApiKey[]> {
    const args = plainToClass(ApiKeyFindManyArgs, request.query);
    return this.service.apiKeys({
      ...args,
      select: {
        appField: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        expiresAt: true,
        hashedKey: true,
        id: true,
        lastUsedAt: true,
        note: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ApiKey })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async apiKey(
    @common.Param() params: ApiKeyWhereUniqueInput
  ): Promise<ApiKey | null> {
    const result = await this.service.apiKey({
      where: params,
      select: {
        appField: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        expiresAt: true,
        hashedKey: true,
        id: true,
        lastUsedAt: true,
        note: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ApiKey })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateApiKey(
    @common.Param() params: ApiKeyWhereUniqueInput,
    @common.Body() data: ApiKeyUpdateInput
  ): Promise<ApiKey | null> {
    try {
      return await this.service.updateApiKey({
        where: params,
        data: {
          ...data,

          appField: data.appField
            ? {
                connect: data.appField,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          appField: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          expiresAt: true,
          hashedKey: true,
          id: true,
          lastUsedAt: true,
          note: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ApiKey })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteApiKey(
    @common.Param() params: ApiKeyWhereUniqueInput
  ): Promise<ApiKey | null> {
    try {
      return await this.service.deleteApiKey({
        where: params,
        select: {
          appField: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          expiresAt: true,
          hashedKey: true,
          id: true,
          lastUsedAt: true,
          note: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
