/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Booking } from "./Booking";
import { BookingCountArgs } from "./BookingCountArgs";
import { BookingFindManyArgs } from "./BookingFindManyArgs";
import { BookingFindUniqueArgs } from "./BookingFindUniqueArgs";
import { CreateBookingArgs } from "./CreateBookingArgs";
import { UpdateBookingArgs } from "./UpdateBookingArgs";
import { DeleteBookingArgs } from "./DeleteBookingArgs";
import { AttendeeFindManyArgs } from "../../attendee/base/AttendeeFindManyArgs";
import { Attendee } from "../../attendee/base/Attendee";
import { PaymentFindManyArgs } from "../../payment/base/PaymentFindManyArgs";
import { Payment } from "../../payment/base/Payment";
import { BookingReferenceFindManyArgs } from "../../bookingReference/base/BookingReferenceFindManyArgs";
import { BookingReference } from "../../bookingReference/base/BookingReference";
import { WorkflowReminderFindManyArgs } from "../../workflowReminder/base/WorkflowReminderFindManyArgs";
import { WorkflowReminder } from "../../workflowReminder/base/WorkflowReminder";
import { DailyEventReference } from "../../dailyEventReference/base/DailyEventReference";
import { DestinationCalendar } from "../../destinationCalendar/base/DestinationCalendar";
import { EventType } from "../../eventType/base/EventType";
import { User } from "../../user/base/User";
import { BookingService } from "../booking.service";
@graphql.Resolver(() => Booking)
export class BookingResolverBase {
  constructor(protected readonly service: BookingService) {}

  async _bookingsMeta(
    @graphql.Args() args: BookingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Booking])
  async bookings(
    @graphql.Args() args: BookingFindManyArgs
  ): Promise<Booking[]> {
    return this.service.bookings(args);
  }

  @graphql.Query(() => Booking, { nullable: true })
  async booking(
    @graphql.Args() args: BookingFindUniqueArgs
  ): Promise<Booking | null> {
    const result = await this.service.booking(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Booking)
  async createBooking(
    @graphql.Args() args: CreateBookingArgs
  ): Promise<Booking> {
    return await this.service.createBooking({
      ...args,
      data: {
        ...args.data,

        dailyRef: args.data.dailyRef
          ? {
              connect: args.data.dailyRef,
            }
          : undefined,

        destinationCalendar: args.data.destinationCalendar
          ? {
              connect: args.data.destinationCalendar,
            }
          : undefined,

        eventType: args.data.eventType
          ? {
              connect: args.data.eventType,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Booking)
  async updateBooking(
    @graphql.Args() args: UpdateBookingArgs
  ): Promise<Booking | null> {
    try {
      return await this.service.updateBooking({
        ...args,
        data: {
          ...args.data,

          dailyRef: args.data.dailyRef
            ? {
                connect: args.data.dailyRef,
              }
            : undefined,

          destinationCalendar: args.data.destinationCalendar
            ? {
                connect: args.data.destinationCalendar,
              }
            : undefined,

          eventType: args.data.eventType
            ? {
                connect: args.data.eventType,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Booking)
  async deleteBooking(
    @graphql.Args() args: DeleteBookingArgs
  ): Promise<Booking | null> {
    try {
      return await this.service.deleteBooking(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Attendee], { name: "attendees" })
  async findAttendees(
    @graphql.Parent() parent: Booking,
    @graphql.Args() args: AttendeeFindManyArgs
  ): Promise<Attendee[]> {
    const results = await this.service.findAttendees(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Payment], { name: "payment" })
  async findPayment(
    @graphql.Parent() parent: Booking,
    @graphql.Args() args: PaymentFindManyArgs
  ): Promise<Payment[]> {
    const results = await this.service.findPayment(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [BookingReference], { name: "references" })
  async findReferences(
    @graphql.Parent() parent: Booking,
    @graphql.Args() args: BookingReferenceFindManyArgs
  ): Promise<BookingReference[]> {
    const results = await this.service.findReferences(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [WorkflowReminder], { name: "workflowReminders" })
  async findWorkflowReminders(
    @graphql.Parent() parent: Booking,
    @graphql.Args() args: WorkflowReminderFindManyArgs
  ): Promise<WorkflowReminder[]> {
    const results = await this.service.findWorkflowReminders(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => DailyEventReference, {
    nullable: true,
    name: "dailyRef",
  })
  async getDailyRef(
    @graphql.Parent() parent: Booking
  ): Promise<DailyEventReference | null> {
    const result = await this.service.getDailyRef(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => DestinationCalendar, {
    nullable: true,
    name: "destinationCalendar",
  })
  async getDestinationCalendar(
    @graphql.Parent() parent: Booking
  ): Promise<DestinationCalendar | null> {
    const result = await this.service.getDestinationCalendar(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => EventType, {
    nullable: true,
    name: "eventType",
  })
  async getEventType(
    @graphql.Parent() parent: Booking
  ): Promise<EventType | null> {
    const result = await this.service.getEventType(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: Booking): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
